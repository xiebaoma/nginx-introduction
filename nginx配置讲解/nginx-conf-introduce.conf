#工作的线程(4核8线程那么下面就设置成8 物理硬件有关)
#user  nobody;
worker_processes  1;


#全局的错误日志存放的地方
#error_log  logs/error.log;


#全局错误日志存放的地方 后面的notice表示的是输出错误日志的格式
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;


#nginx进程号存放的地方
#pid        logs/nginx.pid;


#最大的连接数(这个也跟硬件是有关系的)
events {
    worker_connections  1024;
}


#下面是跟HTTP请求有关系的配置
http {

    #表示的是当前服务器支持的类型，Nginx包含（或加载）名为 mime.types 的文件
    #mime.types 文件是一个映射表，它定义了Web服务器应该为不同文件扩展名提供的MIME类型（也称为媒体类型或内容类型）
    include       mime.types;

    #默认传输的数据类型是流 
    default_type  application/octet-stream;

    #声明了一种日志格式 这种日志格式的名字叫做  main
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #表示的是每一次请求的日志记录 格式就是上面的main格式
    #access_log  logs/access.log  main;

    #是否可以发送文件
    sendfile        on;

    #一个示例
    #其目的可能是为了尝试在发送响应给客户端之前，将多个小的TCP包合并成一个大的包发送
    #tcp_nopush     on;

    #用于设置长连接的超时时间。这个超时时间指的是服务器和客户端之间的连接在保持空闲状态（即在这段时间内没有数据传输）后，可以被关闭的时间。
    #长连接（Keep-Alive）是一种TCP连接的复用方式，通过减少TCP连接的建立和断开次数，来降低服务器的开销和提高资源利用率。
    #然而，如果连接长时间保持空闲状态，也会占用服务器的资源。因此，通过设置keepalive_timeout，可以平衡资源使用效率和服务器资源占用之间的关系。
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #是否打开文件的压缩
    #gzip  on;
	
    #map 指令用于创建一个新的变量，其值基于一个或多个已存在的变量进行匹配和设置。
    #这个 map 配置块是用来确保Nginx能够正确地处理WebSocket连接请求，通过检查 Upgrade 请求头并据此设置 $connection_upgrade 变量，从而指导Nginx如何响应这些请求。
	map $http_upgrade $connection_upgrade{
		default upgrade;
		'' close;
	}

    #负载均衡的配置
	upstream webservers{
	  server 127.0.0.1:8080 weight=90 ;
	  #server 127.0.0.1:8088 weight=10 ;
      #...
	}

    server {

        #nginx服务的接口，用户访问就访问这个接口
        listen       8800;
        server_name  localhost;

        #字符设置
        #charset koi8-r;

        #access_log：这是告诉Nginx要记录访问日志的指令。
        #logs/host.access.log：这是指定访问日志文件的存储路径和文件名。
        #main：这是指定日志文件使用的日志格式
        #access_log  logs/host.access.log  main;

        #做一个反向代理
        #对于所有以根URL开始的请求，Nginx将会在 html 目录下查找请求的资源。
        #如果请求的是一个目录，Nginx会尝试提供 index.html 或 index.htm 文件作为响应。
        location / {
            root   html;
            index  index.html index.htm;
        }

        #当Nginx遇到404错误（即资源未找到）时，应该向客户端发送/404.html页面作为响应。
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;

        #注意这里的等号（=）表示这是一个精确匹配，即只有当请求的URI完全等于 /50x.html 时，这个location块才会被选中来处理请求。
        location = /50x.html {
            root   html;
        }

        # 反向代理,处理管理端发送的请求
        location /api/ {
			proxy_pass   http://localhost:8080/admin/;
            #proxy_pass   http://webservers/admin/;
        }
		
		# 反向代理,处理用户端发送的请求
        location /user/ {
            proxy_pass   http://webservers/user/;
        }
		
		# WebSocket
		location /ws/ {
            proxy_pass   http://webservers/ws/;
			proxy_http_version 1.1;
			proxy_read_timeout 3600s;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "$connection_upgrade";
        }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
